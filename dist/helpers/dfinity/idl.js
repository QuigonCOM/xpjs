"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.idlFactory = void 0;
const idlFactory = ({ IDL }) => {
    const ValidateWhitelistDip721 = IDL.Record({
        dip_contract: IDL.Principal,
    });
    const ValidateCleanLogs = IDL.Record({
        from_action: IDL.Nat,
        to_action: IDL.Nat,
    });
    const ValidateTransferNft = IDL.Record({
        to: IDL.Principal,
        mint_with: IDL.Principal,
        token_url: IDL.Text,
    });
    const ValidateTransferNftBatch = IDL.Record({
        to: IDL.Principal,
        mint_with: IDL.Vec(IDL.Principal),
        token_urls: IDL.Vec(IDL.Text),
    });
    const ValidateUnfreezeNft = IDL.Record({
        to: IDL.Principal,
        dip_contract: IDL.Principal,
        token_id: IDL.Nat,
    });
    const ValidateUnfreezeNftBatch = IDL.Record({
        to: IDL.Principal,
        dip_contracts: IDL.Vec(IDL.Principal),
        token_ids: IDL.Vec(IDL.Nat),
    });
    const Config = IDL.Record({
        event_cnt: IDL.Nat,
        chain_nonce: IDL.Nat64,
        group_key: IDL.Vec(IDL.Nat8),
        paused: IDL.Bool,
    });
    const BridgeEventCtx = IDL.Record({
        to: IDL.Text,
        action_id: IDL.Nat,
        tx_fee: IDL.Nat64,
        chain_nonce: IDL.Nat64,
    });
    const UnfreezeNftBatch = IDL.Record({
        uris: IDL.Vec(IDL.Text),
        token_ids: IDL.Vec(IDL.Nat),
        burner: IDL.Principal,
    });
    const UnfreezeNft = IDL.Record({
        uri: IDL.Text,
        token_id: IDL.Nat,
        burner: IDL.Principal,
    });
    const TransferNft = IDL.Record({
        dip721_contract: IDL.Principal,
        token_id: IDL.Nat,
        mint_with: IDL.Text,
        token_data: IDL.Text,
    });
    const TransferNftBatch = IDL.Record({
        dip721_contract: IDL.Principal,
        token_datas: IDL.Vec(IDL.Text),
        mint_with: IDL.Text,
        token_ids: IDL.Vec(IDL.Nat),
    });
    const BridgeEvent = IDL.Variant({
        UnfreezeNftBatch: UnfreezeNftBatch,
        UnfreezeNft: UnfreezeNft,
        TransferNft: TransferNft,
        TransferNftBatch: TransferNftBatch,
    });
    const ValidateSetGroupKey = IDL.Record({ group_key: IDL.Vec(IDL.Nat8) });
    const ValidateSetPause = IDL.Record({ pause: IDL.Bool });
    const ValidateWithdrawFees = IDL.Record({ to: IDL.Principal });
    return IDL.Service({
        add_whitelist: IDL.Func([IDL.Nat, ValidateWhitelistDip721, IDL.Vec(IDL.Nat8)], [], []),
        clean_logs: IDL.Func([IDL.Nat, ValidateCleanLogs, IDL.Vec(IDL.Nat8)], [], []),
        encode_validate_transfer_nft: IDL.Func([IDL.Nat, ValidateTransferNft], [IDL.Vec(IDL.Nat8)], ["query"]),
        encode_validate_transfer_nft_batch: IDL.Func([IDL.Nat, ValidateTransferNftBatch], [IDL.Vec(IDL.Nat8)], ["query"]),
        encode_validate_unfreeze_nft: IDL.Func([IDL.Nat, ValidateUnfreezeNft], [IDL.Vec(IDL.Nat8)], ["query"]),
        encode_validate_unfreeze_nft_batch: IDL.Func([IDL.Nat, ValidateUnfreezeNftBatch], [IDL.Vec(IDL.Nat8)], ["query"]),
        freeze_nft: IDL.Func([IDL.Nat64, IDL.Principal, IDL.Nat, IDL.Nat64, IDL.Text, IDL.Text], [IDL.Nat], []),
        freeze_nft_batch: IDL.Func([
            IDL.Nat64,
            IDL.Principal,
            IDL.Vec(IDL.Nat),
            IDL.Nat64,
            IDL.Text,
            IDL.Text,
        ], [IDL.Nat], []),
        get_config: IDL.Func([], [Config], ["query"]),
        get_event: IDL.Func([IDL.Nat], [IDL.Opt(IDL.Tuple(BridgeEventCtx, BridgeEvent))], ["query"]),
        is_whitelisted: IDL.Func([IDL.Principal], [IDL.Bool], ["query"]),
        set_group_key: IDL.Func([IDL.Nat, ValidateSetGroupKey, IDL.Vec(IDL.Nat8)], [], []),
        set_pause: IDL.Func([IDL.Nat, ValidateSetPause, IDL.Vec(IDL.Nat8)], [], []),
        validate_transfer_nft: IDL.Func([IDL.Nat, ValidateTransferNft, IDL.Vec(IDL.Nat8)], [IDL.Nat32], []),
        validate_transfer_nft_batch: IDL.Func([IDL.Nat, ValidateTransferNftBatch, IDL.Vec(IDL.Nat8)], [], []),
        validate_unfreeze_nft: IDL.Func([IDL.Nat, ValidateUnfreezeNft, IDL.Vec(IDL.Nat8)], [], []),
        validate_unfreeze_nft_batch: IDL.Func([IDL.Nat, ValidateUnfreezeNftBatch, IDL.Vec(IDL.Nat8)], [], []),
        withdraw_fees: IDL.Func([IDL.Nat, ValidateWithdrawFees, IDL.Vec(IDL.Nat8)], [IDL.Nat64], []),
        withdraw_nft: IDL.Func([IDL.Nat64, IDL.Principal, IDL.Nat, IDL.Nat64, IDL.Text], [IDL.Nat], []),
        withdraw_nft_batch: IDL.Func([IDL.Nat64, IDL.Principal, IDL.Vec(IDL.Nat), IDL.Nat64, IDL.Text], [IDL.Nat], []),
    });
};
exports.idlFactory = idlFactory;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2hlbHBlcnMvZGZpbml0eS9pZGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQU8sTUFBTSxVQUFVLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBZ0IsRUFBRSxFQUFFO0lBQ2xELE1BQU0sdUJBQXVCLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQztRQUN6QyxZQUFZLEVBQUUsR0FBRyxDQUFDLFNBQVM7S0FDNUIsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxpQkFBaUIsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDO1FBQ25DLFdBQVcsRUFBRSxHQUFHLENBQUMsR0FBRztRQUNwQixTQUFTLEVBQUUsR0FBRyxDQUFDLEdBQUc7S0FDbkIsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxtQkFBbUIsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDO1FBQ3JDLEVBQUUsRUFBRSxHQUFHLENBQUMsU0FBUztRQUNqQixTQUFTLEVBQUUsR0FBRyxDQUFDLFNBQVM7UUFDeEIsU0FBUyxFQUFFLEdBQUcsQ0FBQyxJQUFJO0tBQ3BCLENBQUMsQ0FBQztJQUNILE1BQU0sd0JBQXdCLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQztRQUMxQyxFQUFFLEVBQUUsR0FBRyxDQUFDLFNBQVM7UUFDakIsU0FBUyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQztRQUNqQyxVQUFVLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO0tBQzlCLENBQUMsQ0FBQztJQUNILE1BQU0sbUJBQW1CLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQztRQUNyQyxFQUFFLEVBQUUsR0FBRyxDQUFDLFNBQVM7UUFDakIsWUFBWSxFQUFFLEdBQUcsQ0FBQyxTQUFTO1FBQzNCLFFBQVEsRUFBRSxHQUFHLENBQUMsR0FBRztLQUNsQixDQUFDLENBQUM7SUFDSCxNQUFNLHdCQUF3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