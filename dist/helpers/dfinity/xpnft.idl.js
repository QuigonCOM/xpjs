"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.xpnftIdl = void 0;
const xpnftIdl = ({ IDL }) => {
    const TokenIdentifier = IDL.Text;
    const AccountIdentifier = IDL.Text;
    const User = IDL.Variant({
        principal: IDL.Principal,
        address: AccountIdentifier,
    });
    const AllowanceRequest = IDL.Record({
        token: TokenIdentifier,
        owner: User,
        spender: IDL.Principal,
    });
    const Balance__1 = IDL.Nat;
    const CommonError = IDL.Variant({
        InvalidToken: TokenIdentifier,
        Other: IDL.Text,
    });
    const Result = IDL.Variant({ ok: Balance__1, err: CommonError });
    const SubAccount = IDL.Vec(IDL.Nat8);
    const Balance = IDL.Nat;
    const ApproveRequest = IDL.Record({
        token: TokenIdentifier,
        subaccount: IDL.Opt(SubAccount),
        allowance: Balance,
        spender: IDL.Principal,
    });
    const BalanceRequest = IDL.Record({
        token: TokenIdentifier,
        user: User,
    });
    const CommonError__1 = IDL.Variant({
        InvalidToken: TokenIdentifier,
        Other: IDL.Text,
    });
    const BalanceResponse = IDL.Variant({
        ok: Balance,
        err: CommonError__1,
    });
    const TokenIdentifier__1 = IDL.Text;
    const AccountIdentifier__1 = IDL.Text;
    const Result_2 = IDL.Variant({
        ok: AccountIdentifier__1,
        err: CommonError,
    });
    const TokenIndex = IDL.Nat32;
    const Extension = IDL.Text;
    const Metadata = IDL.Variant({
        fungible: IDL.Record({
            decimals: IDL.Nat8,
            metadata: IDL.Opt(IDL.Vec(IDL.Nat8)),
            name: IDL.Text,
            symbol: IDL.Text,
        }),
        nonfungible: IDL.Record({ metadata: IDL.Opt(IDL.Vec(IDL.Nat8)) }),
    });
    const Result_1 = IDL.Variant({ ok: Metadata, err: CommonError });
    const MintRequest = IDL.Record({
        to: User,
        metadata: IDL.Opt(IDL.Vec(IDL.Nat8)),
    });
    const Memo = IDL.Vec(IDL.Nat8);
    const TransferRequest = IDL.Record({
        to: User,
        token: TokenIdentifier,
        notify: IDL.Bool,
        from: User,
        memo: Memo,
        subaccount: IDL.Opt(SubAccount),
        amount: Balance,
    });
    const TransferResponse = IDL.Variant({
        ok: Balance,
        err: IDL.Variant({
            CannotNotify: AccountIdentifier,
            InsufficientBalance: IDL.Null,
            InvalidToken: TokenIdentifier,
            Rejected: IDL.Null,
            Unauthorized: AccountIdentifier,
            Other: IDL.Text,
        }),
    });
    const XPNFT = IDL.Service({
        acceptCycles: IDL.Func([], [], []),
        allowance: IDL.Func([AllowanceRequest], [Result], ["query"]),
        approve: IDL.Func([ApproveRequest], [], []),
        availableCycles: IDL.Func([], [IDL.Nat], ["query"]),
        balance: IDL.Func([BalanceRequest], [BalanceResponse], ["query"]),
        bearer: IDL.Func([TokenIdentifier__1], [Result_2], ["query"]),
        burnNFT: IDL.Func([IDL.Nat32], [TokenIndex], []),
        extensions: IDL.Func([], [IDL.Vec(Extension)], ["query"]),
        getAllowances: IDL.Func([], [IDL.Vec(IDL.Tuple(TokenIndex, IDL.Principal))], ["query"]),
        getMinter: IDL.Func([], [IDL.Principal], ["query"]),
        getRegistry: IDL.Func([], [IDL.Vec(IDL.Tuple(TokenIndex, AccountIdentifier__1))], ["query"]),
        getTokens: IDL.Func([], [IDL.Vec(IDL.Tuple(TokenIndex, Metadata))], ["query"]),
        metadata: IDL.Func([TokenIdentifier__1], [Result_1], ["query"]),
        mintNFT: IDL.Func([MintRequest], [TokenIndex], []),
        setMinter: IDL.Func([IDL.Principal], [], []),
        supply: IDL.Func([TokenIdentifier__1], [Result], ["query"]),
        transfer: IDL.Func([TransferRequest], [TransferResponse], []),
    });
    return XPNFT;
};
exports.xpnftIdl = xpnftIdl;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHBuZnQuaWRsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2hlbHBlcnMvZGZpbml0eS94cG5mdC5pZGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBNEZPLE1BQU0sUUFBUSxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQU8sRUFBRSxFQUFFO0lBQ3ZDLE1BQU0sZUFBZSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUM7SUFDakMsTUFBTSxpQkFBaUIsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDO0lBQ25DLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUM7UUFDdkIsU0FBUyxFQUFFLEdBQUcsQ0FBQyxTQUFTO1FBQ3hCLE9BQU8sRUFBRSxpQkFBaUI7S0FDM0IsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDO1FBQ2xDLEtBQUssRUFBRSxlQUFlO1FBQ3RCLEtBQUssRUFBRSxJQUFJO1FBQ1gsT0FBTyxFQUFFLEdBQUcsQ0FBQyxTQUFTO0tBQ3ZCLENBQUMsQ0FBQztJQUNILE1BQU0sVUFBVSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUM7SUFDM0IsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQztRQUM5QixZQUFZLEVBQUUsZUFBZTtRQUM3QixLQUFLLEVBQUUsR0FBRyxDQUFDLElBQUk7S0FDaEIsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUM7SUFDakUsTUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckMsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQztJQUN4QixNQUFNLGNBQWMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFD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