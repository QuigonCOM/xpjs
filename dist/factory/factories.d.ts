import { AppConfig } from ".";
export declare namespace ChainFactories {
    const TestNetChainFactory: (moralis: AppConfig) => {
        inner<T, P>(chain: import("../consts").ChainNonce<T, P>): Promise<T>;
        transferNft<SignerF, RawNftF, SignerT, RawNftT>(fromChain: import("..").TransferNftForeign<SignerF, string, import("bignumber.js").default, RawNftF> & import("..").UnfreezeForeignNft<SignerF, string, import("bignumber.js").default, RawNftF> & import("..").EstimateTxFees<RawNftF, import("bignumber.js").default> & import("..").PackNft<RawNftF> & import("..").ChainNonceGet & import("..").WrappedNftCheck<RawNftF> & import("..").DecodeWrappedNft<RawNftF> & import("..").DecodeRawNft<RawNftF> & import("..").PopulateDecodedNft<RawNftF> & import("..").ValidateAddress, toChain: import("..").TransferNftForeign<SignerT, string, import("bignumber.js").default, RawNftT> & import("..").UnfreezeForeignNft<SignerT, string, import("bignumber.js").default, RawNftT> & import("..").EstimateTxFees<RawNftT, import("bignumber.js").default> & import("..").PackNft<RawNftT> & import("..").ChainNonceGet & import("..").WrappedNftCheck<RawNftT> & import("..").DecodeWrappedNft<RawNftT> & import("..").DecodeRawNft<RawNftT> & import("..").PopulateDecodedNft<RawNftT> & import("..").ValidateAddress, nft: import("..").NftInfo<RawNftF>, sender: SignerF, receiver: string, fee?: import("bignumber.js").default | undefined): Promise<string>;
        mint<Signer, R>(chain: import("..").MintNft<Signer, import(".").NftMintArgs, R>, owner: Signer, args: import(".").NftMintArgs): Promise<R>;
        nftList<RawNft>(chain: import("..").ChainNonceGet & import("..").WrappedNftCheck<RawNft> & import("..").DecodeWrappedNft<RawNft> & import("..").DecodeRawNft<RawNft> & import("..").PopulateDecodedNft<RawNft>, owner: string): Promise<import("..").NftInfo<RawNft>[]>;
        nftUri<RawNft_1>(chain: import("..").ChainNonceGet & import("..").WrappedNftCheck<RawNft_1> & import("..").DecodeWrappedNft<RawNft_1> & import("..").DecodeRawNft<RawNft_1> & import("..").PopulateDecodedNft<RawNft_1>, nft: import("..").NftInfo<RawNft_1>): Promise<import("..").BareNft>;
        estimateFees<SignerF_1, RawNftF_1, SignerT_1, RawNftT_1>(fromChain: import("..").TransferNftForeign<SignerF_1, string, import("bignumber.js").default, RawNftF_1> & import("..").UnfreezeForeignNft<SignerF_1, string, import("bignumber.js").default, RawNftF_1> & import("..").EstimateTxFees<RawNftF_1, import("bignumber.js").default> & import("..").PackNft<RawNftF_1> & import("..").ChainNonceGet & import("..").WrappedNftCheck<RawNftF_1> & import("..").DecodeWrappedNft<RawNftF_1> & import("..").DecodeRawNft<RawNftF_1> & import("..").PopulateDecodedNft<RawNftF_1> & import("..").ValidateAddress, toChain: import("..").TransferNftForeign<SignerT_1, string, import("bignumber.js").default, RawNftT_1> & import("..").UnfreezeForeignNft<SignerT_1, string, import("bignumber.js").default, RawNftT_1> & import("..").EstimateTxFees<RawNftT_1, import("bignumber.js").default> & import("..").PackNft<RawNftT_1> & import("..").ChainNonceGet & import("..").WrappedNftCheck<RawNftT_1> & import("..").DecodeWrappedNft<RawNftT_1> & import("..").DecodeRawNft<RawNftT_1> & import("..").PopulateDecodedNft<RawNftT_1> & import("..").ValidateAddress, nft: import("..").NftInfo<RawNftF_1>, receiver: string): Promise<import("bignumber.js").default>;
        updateParams<T_1, TP>(nonce: import("../consts").ChainNonce<T_1, TP>, params: TP): void;
    };
    const MainNetChainFactory: (moralis: AppConfig) => {
        inner<T, P>(chain: import("../consts").ChainNonce<T, P>): Promise<T>;
        transferNft<SignerF, RawNftF, SignerT, RawNftT>(fromChain: import("..").TransferNftForeign<SignerF, string, import("bignumber.js").default, RawNftF> & import("..").UnfreezeForeignNft<SignerF, string, import("bignumber.js").default, RawNftF> & import("..").EstimateTxFees<RawNftF, import("bignumber.js").default> & import("..").PackNft<RawNftF> & import("..").ChainNonceGet & import("..").WrappedNftCheck<RawNftF> & import("..").DecodeWrappedNft<RawNftF> & import("..").DecodeRawNft<RawNftF> & import("..").PopulateDecodedNft<RawNftF> & import("..").ValidateAddress, toChain: import("..").TransferNftForeign<SignerT, string, import("bignumber.js").default, RawNftT> & import("..").UnfreezeForeignNft<SignerT, string, import("bignumber.js").default, RawNftT> & import("..").EstimateTxFees<RawNftT, import("bignumber.js").default> & import("..").PackNft<RawNftT> & import("..").ChainNonceGet & import("..").WrappedNftCheck<RawNftT> & import("..").DecodeWrappedNft<RawNftT> & import("..").DecodeRawNft<RawNftT> & import("..").PopulateDecodedNft<RawNftT> & import("..").ValidateAddress, nft: import("..").NftInfo<RawNftF>, sender: SignerF, receiver: string, fee?: import("bignumber.js").default | undefined): Promise<string>;
        mint<Signer, R>(chain: import("..").MintNft<Signer, import(".").NftMintArgs, R>, owner: Signer, args: import(".").NftMintArgs): Promise<R>;
        nftList<RawNft>(chain: import("..").ChainNonceGet & import("..").WrappedNftCheck<RawNft> & import("..").DecodeWrappedNft<RawNft> & import("..").DecodeRawNft<RawNft> & import("..").PopulateDecodedNft<RawNft>, owner: string): Promise<import("..").NftInfo<RawNft>[]>;
        nftUri<RawNft_1>(chain: import("..").ChainNonceGet & import("..").WrappedNftCheck<RawNft_1> & import("..").DecodeWrappedNft<RawNft_1> & import("..").DecodeRawNft<RawNft_1> & import("..").PopulateDecodedNft<RawNft_1>, nft: import("..").NftInfo<RawNft_1>): Promise<import("..").BareNft>;
        estimateFees<SignerF_1, RawNftF_1, SignerT_1, RawNftT_1>(fromChain: import("..").TransferNftForeign<SignerF_1, string, import("bignumber.js").default, RawNftF_1> & import("..").UnfreezeForeignNft<SignerF_1, string, import("bignumber.js").default, RawNftF_1> & import("..").EstimateTxFees<RawNftF_1, import("bignumber.js").default> & import("..").PackNft<RawNftF_1> & import("..").ChainNonceGet & import("..").WrappedNftCheck<RawNftF_1> & import("..").DecodeWrappedNft<RawNftF_1> & import("..").DecodeRawNft<RawNftF_1> & import("..").PopulateDecodedNft<RawNftF_1> & import("..").ValidateAddress, toChain: import("..").TransferNftForeign<SignerT_1, string, import("bignumber.js").default, RawNftT_1> & import("..").UnfreezeForeignNft<SignerT_1, string, import("bignumber.js").default, RawNftT_1> & import("..").EstimateTxFees<RawNftT_1, import("bignumber.js").default> & import("..").PackNft<RawNftT_1> & import("..").ChainNonceGet & import("..").WrappedNftCheck<RawNftT_1> & import("..").DecodeWrappedNft<RawNftT_1> & import("..").DecodeRawNft<RawNftT_1> & import("..").PopulateDecodedNft<RawNftT_1> & import("..").ValidateAddress, nft: import("..").NftInfo<RawNftF_1>, receiver: string): Promise<import("bignumber.js").default>;
        updateParams<T_1, TP>(nonce: import("../consts").ChainNonce<T_1, TP>, params: TP): void;
    };
}
